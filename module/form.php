<?php
/* vim: set expandtab shiftwidth=4 softtabstop=4 tabstop=4: */

/**
 * @package    TIP
 * @subpackage Module
 */

/**
 * Form generator
 *
 * Manages all the forms generated by the TIP system using the QuickForm PEAR
 * package.
 *
 * @final
 * @package    TIP
 * @subpackage Module
 * @tutorial   TIP/Module/TIP_Form.cls
 */
class TIP_Form extends TIP_Module
{
    /**#@+ @access private */

    var $_form = null;
    var $_validation = 'server';
    var $_block = null;
    var $_defaults = null;
    var $_fields = null;
    var $_is_add = false;
    var $_converter = array();


    function _customizations()
    {
        $this->_form->registerElementType('wikiarea', TIP::buildLogicPath('lib', 'wikiarea.php'), 'HTML_QuickForm_wikiarea');
        $this->_form->registerRule('date', 'callback', '_ruleDate', 'TIP_Form');
        $this->_form->registerRule('minimagesize', 'callback', '_ruleMinImageSize', 'TIP_Form');
        $this->_form->registerRule('maximagesize', 'callback', '_ruleMaxImageSize', 'TIP_Form');
    }

    function _getValidTmpFile($struct)
    {
        if (isset($struct['error']) && $struct['error'] != UPLOAD_ERR_OK) {
            return null;
        }
        $tmp_name = @$struct['tmp_name'];
        if (empty($tmp_name) || $tmp_name == 'none') {
            return null;
        }
        return $tmp_name;
    }

    function _ruleDate($value)
    {
        list($day, $month, $year) = array_values($value);
        return checkdate($month, $day, $year);
    }

    function _ruleMinImageSize($value, $size)
    {
        if (is_null($tmp_file = TIP_Form::_getValidTmpFile($value))) {
            // Yet invalid or no uploaded file found
            return true;
        }

        list($min_width, $min_height) = $size;
        list($width, $height) = getimagesize($tmp_file);
        if (empty($width) || empty($height)) {
            // getimagesize() failed to get the size
            return false;
        }

        return $width >= $min_width && $height >= $min_height;
    }

    function _ruleMaxImageSize($value, $size)
    {
        if (is_null($tmp_file = TIP_Form::_getValidTmpFile($value))) {
            // Yet invalid or no uploaded file found
            return true;
        }

        list($max_width, $max_height) = $size;
        list($width, $height) = getimagesize($tmp_file);
        if (empty($width) || empty($height)) {
            // getimagesize() failed to get the size
            return false;
        }

        return $width <= $max_width && $height <= $max_height;
    }

    function _converterTimestamp(&$row, $field)
    {
        list($day, $month, $year) = array_values($row[$field]);
        $row[$field] = mktime(0, 0, 0, $month, $day, $year);
    }

    function _converterISO8601(&$row, $field)
    {
        list($day, $month, $year) = array_values($row[$field]);
        $row[$field] = sprintf('%04d%02d%02d', $year, $month, $day);
    }

    function _converterCancel(&$row, $field)
    {
        $row[$field] = $this->_defaults[$field];
    }

    function _converterUpload(&$row, $field)
    {
        $value =& $row[$field];
        if (is_null($tmp_file = TIP_Form::_getValidTmpFile($value))) {
            // Yet invalid or no uploaded file found
            $this->_converterCancel($row, $field);
            return;
        }

        $extension = substr($value['type'], strpos($value['type'], '/')+1);
        if (empty($extension)) {
            $extension = 'jpeg';
        }

        $path = TIP::buildDataPath($this->_block->getId());
        $id = @$row[$this->_block->data->primary_key];
        $error = true;

        for (;;) {
            if (empty($id)) {
                // Here there is a race condition, but I want $file with the
                // specific extension provided by the mime type to avoid user
                // agents pitfalls
                $file = tempnam($path, 'tmp');
                if (empty($file) || !rename($file, $file . '.' . $extension)) {
                    break;
                }
                $file .= '.' . $extension;
                $name = basename($file);
            } else {
                // If this is a yet stored row, using the $id will make the
                // work a lot safer and cleaner
                $name = $id . '.' . $extension;
                $file = $path . DIRECTORY_SEPARATOR . $name;
            }

            $error = !move_uploaded_file($tmp_file, $file);
            break;
        }

        if ($error) {
            TIP::notifyError('upload');
            $this->_converterCancel($row, $field);
            return;
        }

        $old_name = @$this->_defaults[$field];
        $value = $name;

        if (!empty($old_name) && $old_name != $name) {
            unlink($path . DIRECTORY_SEPARATOR . $old_name);
        }
    }

    function& _widgetText(&$field)
    {
        $id = $field['id'];
        $element =& $this->_addElement('text', $id);
        $element->setAttribute('class', 'expand');

        if (@$field['length'] > 0) {
            $element->setMaxLength($field['length']);
            $this->_addRule($id, 'maxlength', $field['length']);
        }

        return $element;
    }

    function& _widgetPassword(&$field)
    {
        $id = $field['id'];
        $element =& $this->_addElement('password', $id);
        $element->setAttribute('class', 'expand');

        if (@$field['length'] > 0) {
            $element->setMaxLength($field['length']);
            $this->_addRule($id, 'maxlength', $field['length']);
        }

        $reid = 're' . $id;
        $reelement =& $this->_addElement('password', $reid);
        $reelement->setAttribute('class', 'expand');

        // The repetition field must have the same features of the original,
        // so the field structure is copyed
        if (!array_key_exists($reid, $this->_fields)) {
            $this->_fields[$reid] = $field;
        }

        $this->_addRule(array($reid, $id), 'compare');
        if (!array_key_exists($reid, $this->_defaults)) {
            $this->_defaults[$reid] = $this->_defaults[$id];
        }

        return $element;
    }

    function& _widgetEnum(&$field)
    {
        $id = $field['id'];
        $label = $this->_block->getLocale($id . '_label');
        $items = array_flip($field['choices']);
        array_walk($items, array(&$this->_block, 'localize'), array($id . '_', '_label'));

        if (count($field['choices']) > 3) {
            // On lot of available choices, use a select menu
            $element =& $this->_form->addElement('select', $id, $label, $items);
            $element->setAttribute('class', 'expand');
        } else {
            // On few available choices, use radio button
            $group = array();
            foreach ($items as $i_value => $i_label) {
                $item =& $this->_form->createElement('radio', $id, $label, $i_label, $i_value);
                $group[] =& $item;
            }
            $element =& $this->_form->addElement('group', $id, $label, $group, null, false);
        }

        return $element;
    }

    function& _widgetSet(&$field)
    {
        $id = $field['id'];
        $label = $this->_block->getLocale($id . '_label');
        $items = array_flip($field['choices']);
        array_walk($items, array(&$this->_block, 'localize'), $id . '_label');

        $group = array();
        foreach ($items as $i_value => $i_label) {
            $item =& $this->_form->createElement('advcheckbox', $id, $label, $i_label);
            $group[] =& $item;
        }

        return $this->_form->addElement('group', $id, $label, $group);
    }

    function& _widgetTextArea(&$field)
    {
        $id = $field['id'];
        $element =& $this->_addElement('wikiarea', $id);
        $element->setAttribute('class', 'expand');

        if (array_key_exists('wiki_rules', $field)) {
            $wiki_rules = explode(',', $field['wiki_rules']);
        } else {
            $wiki_rules = null;
        }
        $element->setWiki(TIP::getWiki($wiki_rules));
        $element->setRows('10');

        return $element;
    }

    function& _widgetDate(&$field)
    {
        $id = $field['id'];
        $label = $this->_block->getLocale($id . '_label');

        // Set the date in a format suitable for HTML_QuickForm_date
        $iso8601 = @$this->_defaults[$id];
        $timestamp = empty($iso8601) ? time() : TIP::getTimestamp($iso8601, 'iso8601');
        $this->_defaults[$id] = $timestamp;

        $field_year = date('Y', $this->_defaults[$id]);
        $this_year = date('Y');

        // $min_year > $max_year so the year list is properly sorted in reversed order
        $options = array(
            'language' => TIP::getOption('application', 'locale'),
            'format'   => 'dFY',
            'minYear'  => $this_year+1,
            'maxYear'  => $field_year < $this_year-5 ? $field_year : $this_year-5
        );

        $this->_addRule($id, 'date');
        $this->_addConverter($id, 'ISO8601');
        return $this->_form->addElement('date', $id, $label, $options);
    }

    function& _widgetFile(&$field)
    {
        $id = $field['id'];
        $element =& $this->_addElement('file', $id);

        $this->_addConverter($id, 'upload');
        return $element;
    }

    function& _addElement($type, $id)
    {
        $label = $this->_block->getLocale($id . '_label');
        return $this->_form->addElement($type, $id, $label);
    }

    function _addRule($id, $type, $format = '')
    {
        // Add the format as context to getLocale (in case the message will
        // embed them)
        if (is_array($format)) {
            $context = $format;
        } elseif (!empty($format)) {
            $context[0] = $format;
        } else {
            $context = null;
        }
            
        $message = $this->getLocale($type, $context);
        $this->_form->addRule($id, $message, $type, $format, $this->_validation);
    }

    function _addCustomRules($id, $text)
    {
        $rules = explode(',', $text);
        foreach ($rules as $rule) {
            $open_brace = strpos($rule, '(');
            if ($open_brace === false) {
                $type = $rule;
                $format = '';
            } else {
                $close_brace = strrpos($rule, ')');
                if ($close_brace === false || $close_brace < $open_brace) {
                    TIP::warning("invalid custom rule for field $id ($rule)");
                    continue;
                }
                $type = substr($rule, 0, $open_brace);
                $format = substr($rule, $open_brace+1, $close_brace-$open_brace-1);
                if (strpos($format, ' ')) {
                    $format = explode(' ', $format);
                }
            }
            $this->_addRule($id, $type, $format);
        }
    }

    function _addConverter($id, $type)
    {
        $this->_converter[$id] = $type;
    }

    function _onConversion(&$row)
    {
        foreach ($this->_converter as $field => $type) {
            $method = '_converter' . $type;
            $this->$method($row, $field);
        }

        $this->on_process->go($row);
    }

    function _onProcess($row)
    {
        if ($this->_is_add) {
            // Put operation
            $this->_block->data->putRow($row);
        } else {
            // Update operation
            $this->_block->data->updateRow($row);
        }
    }

    /**#@-*/


    /**#@+ @access public */

    /**
     * Process callback
     *
     * Function to call while processing the data. It takes one argument:
     * an associative array of validated values.
     *
     * By default, if the value with the primary field key is not found in the
     * array this callback will add a new row to the $data object of the binded
     * block or will update an existing row if the primary key field is found.
     *
     * @var TIP_Callback
     */
    var $on_process = null;


    /**
     * Form constructor
     *
     * Initializes the on_process callback to the default one.
     */
    function TIP_Form()
    {
        $this->TIP_Module();

        $this->on_process =& $this->callback('_onProcess');
    }

    /**
     * Set the TIP_Form
     *
     * Defines some needed setting.
     *
     * @param TIP_Block &$block      The requesting block
     * @param array      $row        The default values
     * @param bool       $is_add     Is this an add form?
     * @param string     $validation Validation mode ('client' | 'server')
     * @return bool true on success or false on errors
     */
    function setForm(&$block, $row = null, $is_add = null, $validation = null)
    {
        $this->_block =& $block;
        $this->_defaults = $row;

        if (isset($is_add)) {
            $this->_is_add = $is_add;
        }
        if (isset($validation)) {
            $this->_validation = $validation;
        }
    }

    /**
     * Create a generic form
     *
     * The form is only created as data structure: no echo operations are
     * performed in this step.
     *
     * @return bool true on success or false on errors
     */
    function make()
    {
        require_once 'HTML/QuickForm.php';
        require_once 'HTML/QuickForm/DHTMLRulesTableless.php';

        $this->_form =& new HTML_QuickForm_DHTMLRulesTableless($this->_block->getId());
        $this->_customizations();
        $this->_form->removeAttribute('name'); // XHTML compliance

        $application =& $GLOBALS[TIP_MAIN_MODULE];
        $this->_fields =& $this->_block->data->getFields();
        $primary_key = $this->_block->data->primary_key;

        $header = $this->_block->getLocale($this->_is_add ? 'add_header' : 'edit_header');
        $this->_form->addElement('header', 'PageHeader', $header);
        $this->_form->addElement('hidden', 'module', $this->_block->getId());
        $this->_form->addElement('hidden', 'action', $application->keys['ACTION']);

        foreach (array_keys($this->_fields) as $id) {
            $field =& $this->_fields[$id];

            if (substr($id, 0, 1) == '_' || $field['automatic']) {
                // By default, fields starting with '_' and automatic fields
                // cannot be edited, so are included as hidden (if defined)
                if (array_key_exists($id, $this->_defaults)) {
                    $this->_form->addElement('hidden', $id, $this->_defaults[$id]);
                }
                continue;
            }

            $method = '_widget' . @$field['widget'];
            if (!method_exists($this, $method)) {
                $method = '_widgetText';
            }

            $element =& $this->$method($field);
            if (is_null($element)) {
                continue;
            }

            // Automatic adding of the rules guessed by TIP
            if (is_numeric($field['default'])) {
                $this->_addRule($id, 'numeric');
            }
            if (@$field['category'] == 'required') {
                $this->_addRule($id, 'required');
            }

            // Add the explicitelly defined rules
            if (isset($field['rules'])) {
                $this->_addCustomRules($id, $field['rules']);
            }
        }

        $this->_form->applyFilter('__ALL__', 'trim');
        return true;
    }

    /**
     * Process the form
     *
     * Processes, or better said try to process, the form.
     *
     * @return bool|null true if the form is processed, false if the form must
     *                   be processed or null on errors
     */
    function process()
    {
        if ($this->_form->validate()) {
            if (@TIP::getSession('form.to_process')) {
                $this->_form->process(array(&$this, '_onConversion'));
                TIP::setSession('form.to_process', null);
                TIP::notifyInfo('done');
            }

            return $this->view(TIP::buildUrl('index.php'));
        }

        TIP::setSession('form.to_process', true);

        // Add reset and submit buttons
        $group[] = $this->_form->createElement('reset', null, $this->getLocale('reset'));
        $group[] = $this->_form->createElement('submit', null, $this->getLocale('submit'));
        $this->_form->addElement('group', 'buttons', null, $group);

        if (is_array($this->_defaults)) {
            // Set the default values from the given row
            $defaults =& $this->_defaults;
        } else {
            // Set the default values with the defaults from TIP_Data
            $defaults = array_map(create_function('&$f', 'return $f["default"];'), $this->_fields);
        }

        $this->_form->setDefaults($defaults);
        return false;
    }

    /**
     * Prepare the form to be viewed
     *
     * @param string $referer The link where to turn back
     * @return bool true on success or false on errors
     */
    function view($referer = null)
    {
        if (is_null($referer) && is_null($referer = $_SERVER['HTTP_REFERER'])) {
            $referer = TIP::buildUrl('index.php');
        }

        // Add the 'Close' button
        $element =& $this->_form->addElement('link', 'buttons', null, $referer);
        $element->setAttribute('class', 'command');
        $element->setText($this->getLocale('close'));

        $this->_form->freeze();
        return true;
    }

    /**
     * Render the form
     *
     * This is the final step of the TIP_Form module: the rendering.
     *
     * @return bool true on success or false on errors
     */
    function render()
    {
        require_once 'HTML/QuickForm/Renderer/Tableless.php';

        $renderer =& new HTML_QuickForm_Renderer_Tableless();
        $renderer->addStopFieldsetElements('buttons');
        $this->_form->accept($renderer);

        echo $renderer->toHtml();
        return true;
    }

    /**#@-*/
}

return 'TIP_Form';

?>
