<?php
/* vim: set expandtab shiftwidth=4 softtabstop=4 tabstop=4 foldmethod=marker: */

/**
 * TIP_Expiration definition file
 *
 * LICENSE: This source file is subject to the New BSD license that is 
 * available through the world-wide-web at the following URI:
 * http://www.opensource.org/licenses/bsd-license.php
 * If you did not receive a copy of the New BSD License and are unable to
 * obtain it through the web, please send a note to license@php.net so we
 * can mail you a copy immediately.
 *
 * @author    Nicola Fontana <ntd@entidi.it>
 * @copyright Copyright &copy; 2006-2008 Nicola Fontana
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @package   TIP
 * @since     0.3.4
 */

/**
 * Expiration module
 *
 * Extends the content module by implementing the additional
 * "expiration" feature. Any row has an "EXPIRED" calculated boolean
 * field based on the "expiration_field" (a date field) and the
 * "expiration" value (a time displacement in any format accepted
 * by the strtotime() function).
 *
 * Additionaly, a flag system is available, although not enabled
 * by default. This feature allows the "flag" and "unflag" actions,
 * useful for instance to signal suspicious content. The flag
 * system has full statistical hooks for keeping track of counter
 * values on a user basis.
 *
 * @package TIP
 */
class TIP_Expiration extends TIP_Content
{
    //{{{ Properties

    /**
     * The field owning the expiration time
     * @var string
     */
    protected $expiration_field = '_expiration';

    /**
     * The field containing the optional boolean flag
     * @var string
     */
    protected $flag_field = null;

    /**
     * The field referring to the user who flagged
     * @var string
     */
    protected $flagger_field = null;

    /**
     * The field containing the flagging date
     * @var string
     */
    protected $flagon_field = null;

    /**
     * The field in user containing statistic on how many time the
     * user performed a flag action
     * @var string
     */
    protected $flaggee_field = null;

    /**
     * The field in user containing statistic on how many time a
     * user received a flag action
     * @var string
     */
    protected $flagged_field = null;

    /**
     * The field in user containing statistic on how many time the
     * user performed an unflag action
     * @var string
     */
    protected $unflaggee_field = null;

    /**
     * The field in user containing statistic on how many time a
     * user received an unflag action
     * @var string
     */
    protected $unflagged_field = null;

    /**
     * The default expiration time
     * @var string
     */
    protected $expiration = '+2 month';

    //}}}
    //{{{ Construction/destruction

    /**
     * Constructor
     *
     * Initializes a TIP_Expiration instance.
     *
     * @param array $options Properties values
     */
    protected function __construct($options)
    {
        parent::__construct($options);
    }

    //}}}
    //{{{ Callbacks

    /**
     * 'on_row' callback for TIP_Data_View
     *
     * Adds the following calculated fields to every data row:
     * - 'EXPIRED': true if the row has expired
     *
     * @param  array &$row The row as generated by TIP_Data_View
     * @return bool        always true
     */
    public function _onDataRow(&$row)
    {
        $row['EXPIRED'] = TIP::getTimestamp($row[$this->expiration_field], 'sql') < time();
        return parent::_onDataRow($row);
    }

    /**
     * 'add' callback
     *
     * Overrides the default callback setting the initial expiration value.
     *
     * @param  array &$row The data row to add
     * @return bool        true on success, false on errors
     */
    public function _onAdd(&$row)
    {
        if (isset($this->expiration_field)) {
            TIP::arrayDefault($row, $this->expiration_field,
                TIP::formatDate('datetime_sql', strtotime($this->expiration)));
        }

        return parent::_onAdd($row);
    }

    /**
     * 'on_process' callback for refresh actions
     *
     * Posticipates the expiration date using the current date as
     * reference.
     *
     * @param  array &$row The row to update
     * @return bool        true on success or false on errors
     */
    public function _onRefresh(&$old_row)
    {
        if (!isset($this->expiration_field)) {
            // Undefined expiration field: returns true silently
            return true;
        }

        $expiration = strtotime($this->expiration);
        if ($expiration === false) {
            TIP::error("invalid expiration value ($this->expiration)");
            return false;
        }

        $row[$this->expiration_field] = TIP::formatDate('datetime_sql', $expiration);
        return $this->_onEdit($row, $old_row);
    }

    /**
     * 'on_process' callback for flag actions
     *
     * Flags this row, that is set an enum "yes/no" field to "yes".
     * The flagging operation can be useful, for instance, for
     * signaling suspected content.
     *
     * @param  array &$row The row to flag
     * @return bool        true on success or false on errors
     */
    public function _onFlag(&$old_row)
    {
        if (!isset($this->flag_field)) {
            // No flag field defined: silently returns true
            return true;
        }

        $flagger = TIP::getUserId();
        $flagged = @$old_row[$this->owner_field];

        $row[$this->flag_field] = 'yes';
        if (isset($this->flagger_field)) {
            $row[$this->flagger_field] = $flagger;
        }
        if (isset($this->flagon_field)) {
            $row[$this->flagon_field] = TIP::formatDate('datetime_sql');
        }

        if (!$this->data->updateRow($row, $old_row)) {
            return false;
        }

        $user = TIP_Application::getSharedModule('user');
        if (!$user) {
            // User module not available: no statistic update required
            return true;
        }

        // Update statistics of the flagging user
        if (isset($flagger, $this->flaggee_field)) {
            $user->increment($this->flaggee_field);
        }

        // Update statistics of the flagged user
        if (isset($flagged, $this->flagged_field) &&
            !is_null($view = $user->startDataView($user->getProperty('data')->rowFilter($flagged)))) {
            $row = $view->current();
            $user->endView();
            if (!is_null($row)) {
                $old_row = $row;
                ++ $row[$this->flagged_field];
                $user->getProperty('data')->updateRow($row, $old_row);
            }
        }

        return true;
    }

    /**
     * 'on_process' callback for unflag actions
     *
     * This is the reverse operation of _onFlag(), and set the
     * flag field to "no".
     *
     * @param  array &$row The row to flag
     * @return bool        true on success or false on errors
     */
    public function _onUnflag(&$old_row)
    {
        if (!isset($this->flag_field)) {
            // No flag field defined: silently returns true
            return true;
        }

        $flagger = @$old_row[$this->flagger_field];
        $flagged = @$old_row[$this->owner_field];

        $row[$this->flag_field] = 'no';
        if (!$this->data->updateRow($row, $old_row)) {
            return false;
        }

        $user = TIP_Application::getSharedModule('user');
        if (!$user) {
            // User module not available: no statistic update required
            return true;
        }

        // Update statistics of the flagging user
        if (isset($flagger, $this->unflaggee_field) &&
            !is_null($view = $user->startDataView($user->getProperty('data')->rowFilter($flagger)))) {
            $row = $view->current();
            $user->endView();
            if (!is_null($row)) {
                $old_row = $row;
                ++ $row[$this->unflaggee_field];
                $user->getProperty('data')->updateRow($row, $old_row);
            }
        }

        // Update statistics of the flagged user
        if (isset($flagged, $this->unflagged_field) &&
            !is_null($view = $user->startDataView($user->getProperty('data')->rowFilter($flagged)))) {
            $row = $view->current();
            $user->endView();
            if (!is_null($row)) {
                $old_row = $row;
                ++ $row[$this->unflagged_field];
                $user->getProperty('data')->updateRow($row, $old_row);
            }
        }

        return true;
    }

    //}}}
    //{{{ Actions

    protected function actionFlag($id, $options = null)
    {
        isset($options) || $options = array(
            'action_id'  => 'flag',
            'buttons'    => TIP_FORM_BUTTON_OK|TIP_FORM_BUTTON_CANCEL,
            'on_process' => array(&$this, '_onFlag')
        );
        return !is_null($this->form(TIP_FORM_ACTION_CUSTOM, $id, $options));
    }

    protected function actionUnflag($id, $options = null)
    {
        isset($options) || $options = array(
            'action_id'  => 'unflag',
            'buttons'    => TIP_FORM_BUTTON_OK|TIP_FORM_BUTTON_CANCEL,
            'on_process' => array(&$this, '_onUnflag')
        );
        return !is_null($this->form(TIP_FORM_ACTION_CUSTOM, $id, $options));
    }

    protected function actionRefresh($id, $options = null)
    {
        isset($options) || $options = array(
            'action_id'  => 'refresh',
            'buttons'    => TIP_FORM_BUTTON_OK|TIP_FORM_BUTTON_CANCEL,
            'on_process' => array(&$this, '_onRefresh')
        );
        return !is_null($this->form(TIP_FORM_ACTION_CUSTOM, $id, $options));
    }


    protected function runAdminAction($action)
    {
        switch ($action) {

        case 'unflag':
            return
                !is_null($id = $this->fromGetOrPost()) &&
                $this->actionUnflag($id);

        case 'refresh':
            return
                !is_null($id = $this->fromGetOrPost()) &&
                $this->actionRefresh($id);
        }

        return parent::runAdminAction($action);
    }

    protected function runTrustedAction($action)
    {
        switch ($action) {

        case 'flag':
            return
                !is_null($id = $this->fromGetOrPost()) &&
                $this->isNotOwner($id) &&
                $this->actionFlag($id);

        case 'refresh':
            return
                !is_null($id = $this->fromGetOrPost()) &&
                $this->isOwner($id) &&
                $this->actionRefresh($id);
        }

        return parent::runTrustedAction($action);
    }

    //}}}
}
?>
