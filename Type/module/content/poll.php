<?php
/* vim: set expandtab shiftwidth=4 softtabstop=4 tabstop=4 foldmethod=marker: */

/**
 * TIP_Poll definition file
 * @package TIP
 * @subpackage Module
 */

/**
 * Poll module
 *
 * @package TIP
 * @subpackage Module
 */
class TIP_Poll extends TIP_Content
{
    //{{{ Properties

    /**
     * The source to run to confirm the vote
     * @var string
     */
    protected $vote_source = 'vote.src';

    /**
     * The expiration time for the vote
     * @var string
     */
    protected $expiration = '+2 hour';

    //}}}
    //{{{ Constructor/destructor

    static protected function checkOptions(&$options)
    {
        if (!parent::checkOptions($options)) {
            return false;
        }

        isset($options['browsable_fields']) || $options['browsable_fields'] = array(
            TIP_PRIVILEGE_NONE    => array('__ALL__')
        );
        return true;
    }

    /**
     * Constructor
     *
     * Initializes a TIP_Poll instance.
     *
     * @param array $options Properties values
     */
    protected function __construct($options)
    {
        parent::__construct($options);
    }

    //}}}
    //{{{ Actions

    /**
     * Perform a vote action
     *
     * Runs the 'vote_source' source to get a confirmation on the vote and
     * adds the vote if confirmed.
     *
     * @param  int  $id     The poll id
     * @param  int  $answer The answer id
     * @return bool         true on success or false on errors
     */
    protected function actionVote($id, $answer)
    {
        $expiration = @HTTP_Session2::get($this->id . '.expiration');
        $voting = @HTTP_Session2::get($this->id . '.voting');
        if ($voting && time() < $expiration) {
            TIP::notifyError('doublevote');
            return false;
        }

        if (is_null($row =& $this->fromRow($id, false))) {
            return false;
        }

        if (is_null($answer_label = $this->getField('answer' . $answer))) {
            TIP::notifyError('wrongparams');
            $this->endView();
            return false;
        }

        if (@TIP::getGet('process', 'int') == 1) {
            if (!$voting) {
                TIP::notifyError('nocookies');
                $this->endView();
                return false;
            }
            $old_row = $row;
            ++ $row['votes' . $answer];
            $this->_onDataRow($row);

            $this->data->updateRow($row, $old_row);
            HTTP_Session2::set($this->id . '.voting', false);
            HTTP_Session2::set($this->id . '.expiration', strtotime($this->expiration));
            $this->appendToPage($this->view_source);
        } else {
            HTTP_Session2::set($this->id . '.voting', true);
            $this->appendToPage($this->vote_source);
        }

        $this->endView();
        return true;
    }

    protected function runAction($action)
    {
        switch ($action) {

        case 'vote':
            return
                !is_null($id = $this->fromGet()) &&
                !is_null($answer = $this->fromGet('answer')) &&
                $this->actionVote($id, $answer);
        }

        return parent::runAction($action);
    }

    //}}}
    //{{{ Callbacks

    /**
     * 'on_row' callback for TIP_Data_View
     *
     * Adds the following calculated fields to every data row:
     * - 'TOTAL':    the sum of all votes
     * - 'PERCENT1': percentual (rounded to integer) of 'votes1'
     * - 'PERCENT2': percentual (rounded to integer) of 'votes2'
     * - 'PERCENT3': percentual (rounded to integer) of 'votes3'
     * - 'PERCENT4': percentual (rounded to integer) of 'votes4'
     * - 'PERCENT5': percentual (rounded to integer) of 'votes5'
     * - 'PERCENT6': percentual (rounded to integer) of 'votes6'
     *
     * @param  array &$row The row as generated by TIP_Data_View
     * @return bool        always true
     */
    public function _onDataRow(&$row)
    {
        $total =
            $row['votes1'] + $row['votes2'] + $row['votes3'] +
            $row['votes4'] + $row['votes5'] + $row['votes6'];

        $row['TOTAL'] = $total;

        // Avoid division per 0
        $total > 0 || $total = 1;

        $row['PERCENT1'] = round($row['votes1'] * 100 / $total);
        $row['PERCENT2'] = round($row['votes2'] * 100 / $total);
        $row['PERCENT3'] = round($row['votes3'] * 100 / $total);
        $row['PERCENT4'] = round($row['votes4'] * 100 / $total);
        $row['PERCENT5'] = round($row['votes5'] * 100 / $total);
        $row['PERCENT6'] = round($row['votes6'] * 100 / $total);
        return true;
    }

    //}}}
}
?>
