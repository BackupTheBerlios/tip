<?php
/* vim: set expandtab shiftwidth=4 softtabstop=4 tabstop=4 foldmethod=marker: */

/**
 * TIP_Devhelp2 definition file
 *
 * LICENSE: This source file is subject to the New BSD license that is 
 * available through the world-wide-web at the following URI:
 * http://www.opensource.org/licenses/bsd-license.php
 * If you did not receive a copy of the New BSD License and are unable to
 * obtain it through the web, please send a note to license@php.net so we
 * can mail you a copy immediately.
 *
 * @author    Nicola Fontana <ntd@entidi.it>
 * @copyright Copyright &copy; 2006,2007,2008,2009 Nicola Fontana
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @package   TIP
 * @since     0.3.3
 */

/**
 * A content module managing devhelp2 hierarchies
 *
 * This is a stripped down rewrite of TIP_Hierarchy that sets a
 * default data engine capable to directly manage .devhelp2 files,
 * the common format generated by gtk-doc.
 *
 * To be able to use this module, it suffices to configure a
 * devhelp2 module and feed it with the .devhelp2 file:
 *
 * <code>
 * $cfg = array(
 *     ...
 *     'api'      => array(
 *         'type' => array('module', 'content', 'devhelp2'),
 *         'data' => 'api/adg.devhelp2'
 *     ),
 *     ...
 * );
 * </code>
 *
 * After that, the template system can use the hierarcy generated
 * by the "show" tag in the same way the TIP_Hierarchy module is
 * used, for instance (using the TIP_RcbtNG engine):
 *
 * <code>
 * <ul class="article">{API.show(view,-id-)}
 * </ul>
 * </code>
 *
 * The actionView() method is overriden so that, on a view request,
 * the corresponding html file (searched in the data directory of
 * the current module) is output "as is" in the page content.
 * This means a previous stripping step is required in order to
 * directly use the file generated by gtk-doc: a simple xslt
 * transformation that removes everything unneeded will be enough.
 *
 * For more customizations, the "view_template" is still available,
 * although disabled if not explicitely set in the configuration.
 * In this case, the whole file content is kept in the global
 * key "CONTENT", so can be accessed using the tag {CONTENT} from
 * the source template.
 *
 * @package TIP
 */
class TIP_Devhelp2 extends TIP_Content
{
    //{{{ Construction/destruction

    static protected function checkOptions(&$options)
    {
        if (@is_string($options['data'])) {
            $options['data'] = array('path' => $options['data']);
        }

        // The data path is a required option
        if (!@is_array($options['data']) || !isset($options['data']['path'])) {
            return false;
        }

        TIP::arrayDefault($options, 'id_type', 'string');
        TIP::arrayDefault($options['data'], 'primary_key', 'link');
        TIP::arrayDefault($options['data'], 'data_engine', array(
            'id'            => 'devhelp2',
            'type'          => array('data_engine', 'xml'),
            'parent_field'  => 'parent',
            'base_xpath'    => '/book/chapters',
            'row_xpath'     => 'sub',
            'fields_xpath'  => array(
                'link'      => '@link',
                'title'     => '@name'
        )));

        return parent::checkOptions($options);
    }

    /**
     * Constructor
     *
     * Initializes a TIP_Devhelp2 instance.
     *
     * @param array $options Properties values
     */
    protected function __construct($options)
    {
        // By default use the built-in template, overridable
        // if explicitely set by the $options array
        $this->view_template = null;
        parent::__construct($options);
    }

    //}}}
    //{{{ Callbacks

    public function _createModel(&$view)
    {
        if (!is_null($this->_model)) {
            return true;
        }

        $this->_model = array();
        $rows = $view->getProperty('rows');
        if (empty($rows)) {
            return true;
        }

        $primary_key = $this->data->getProperty('primary_key');
        $parent_field = $this->data->getProperty('engine')->getProperty('parent_field');
        foreach (array_keys($rows) as $id) {
            $row =& $rows[$id];
            isset($row['id']) || $row['id'] = $id;
            isset($row['CLASS']) || $row['CLASS'] = 'item';

            if (isset($parent_field, $row[$parent_field])
                && !empty($row[$parent_field])) {
                do {
                    $parent =& $rows[$row[$parent_field]];
                    if (@$parent['CLASS'] != 'folder') {
                        $parent['CLASS'] = 'folder';
                    }
                    $parent['sub'][$row[$primary_key]] =& $row;
                    $row =& $parent;
                } while (!empty($row[$parent_field]));
            } else {
                $this->_model[$id] =& $row;
            }
        }

        return true;
    }

    //}}}
    //{{{ Tags

    /**#@+
     * @param  string      $params Parameters of the tag
     * @return string|null         The string result or null
     */

    /**
     * Echo the hierarchy
     *
     * Overrides the default tagShow() to disable the page indexing
     * if the current selected row is a container. In $params you can
     * specify the custom action to use: if left empty, the default
     * action (configured for this module) will be used.
     */
    protected function tagShow($params)
    {
        if (is_null($renderer = $this->_getRenderer($params))) {
            return null;
        }

        if ($renderer->isCurrentContainer()) {
            // If the current row is a container, don't index this page
            TIP_Application::setRobots(false, null);
        }

        return $renderer->toHtml();
    }

    /**#@-*/

    //}}}
    //{{{ Actions

    /**
     * Perform a view action
     *
     * Runs the file identified by the 'view_template' property for the
     * specified row. The rendered result is appended to the page.
     *
     * @param  mixed $id The identifier of the row to view
     * @return bool      true on success or false on errors
     */
    protected function actionView($id)
    {
        // The query is not strictly necessary but it is still performed
        // to avoid read actions on arbitrary files
        if (is_null($row =& $this->fromRow($id, false)) || !$this->_onView($row)) {
            return false;
        }

        // Check for the html file existence
        $file = TIP::buildDataPath($this->id, $id);
        if (!is_readable($file)) {
            $this->endView();
            return false;
        }

        $content =& TIP_Application::getGlobal('content');

        if (empty($this->view_template)) {
            // On empty template, output the whole html file content
            // and set a viable "title" metatag
            $content .= file_get_contents($file);
            $title =& TIP_Application::getGlobal('title');
            $title = str_replace('.html', '', $id) . ' (' . $title . ')';
        } else {
            // Use a custom template
            $this->keys['CONTENT'] = file_get_contents($file);
            $content .= $this->tagRun($this->view_template);
            // Don't keep the whole content in memory
            unset($this->keys['CONTENT']);
        }

        $this->endView();
        return true;
    }

    //}}}
}
?>
